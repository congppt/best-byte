"""init

Revision ID: aa94bac48a7f
Revises:
Create Date: 2025-04-29 16:11:57.311679

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "aa94bac48a7f"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "category",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("parent_id", sa.Integer(), nullable=True),
        sa.Column("icon", sa.String(), nullable=True),
        sa.Column(
            "status",
            sa.Enum("ACTIVE", "INACTIVE", name="categorystatus", native_enum=False),
            nullable=False,
        ),
        sa.CheckConstraint("parent_id != id", name=op.f("ck_category_self_reference")),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["category.id"],
            name=op.f("fk_category_[parent_id]_category"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_category")),
        sa.UniqueConstraint("name", name=op.f("uq_category_[name]")),
    )
    op.create_table(
        "spec",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("category_id", sa.Integer(), nullable=False),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column(
            "type",
            sa.Enum("STR", "NUM", name="spectype", native_enum=False),
            nullable=False,
        ),
        sa.Column("units", sa.ARRAY(sa.String()), nullable=False),
        sa.Column("filterable", sa.Boolean(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("ACTIVE", "INACTIVE", name="specstatus", native_enum=False),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["category.id"],
            name=op.f("fk_spec_[category_id]_category"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_spec")),
        sa.UniqueConstraint(
            "category_id", "label", name=op.f("uq_spec_[category_id_label]")
        ),
    )
    op.create_table(
        "spec_comparison",
        sa.Column("left_id", sa.Integer(), nullable=False),
        sa.Column("right_id", sa.Integer(), nullable=False),
        sa.Column(
            "operator",
            sa.Enum(
                "EQ",
                "NE",
                "GE",
                "LE",
                name="speccomparisonoperator",
                native_enum=False,
            ),
            nullable=False,
        ),
        sa.CheckConstraint(
            "left_id != right_id", name=op.f("ck_spec_comparison_self_comparison")
        ),
        sa.ForeignKeyConstraint(
            ["left_id"], ["spec.id"], name=op.f("fk_spec_comparison_[left_id]_spec")
        ),
        sa.ForeignKeyConstraint(
            ["right_id"], ["spec.id"], name=op.f("fk_spec_comparison_[right_id]_spec")
        ),
        sa.PrimaryKeyConstraint("left_id", "right_id", name=op.f("pk_spec_comparison")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("spec_comparison")
    op.drop_table("spec")
    op.drop_table("category")
    # ### end Alembic commands ###
